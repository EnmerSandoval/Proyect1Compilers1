// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: Lexer.flex

package org.example.lexer;

import java.io.*;
import java_cup.runtime.*;
import javax.swing.JOptionPane;
import org.example.cup.*;


@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\2\22\0\1\1"+
    "\1\0\1\4\1\5\13\0\1\6\12\7\1\0\1\10"+
    "\1\11\1\12\1\13\2\0\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\2\0\1\25\1\26"+
    "\1\27\1\30\1\31\1\0\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\2\0\1\41\1\0\1\42\1\0"+
    "\1\43\1\0\1\44\1\45\1\46\1\7\1\47\1\7"+
    "\2\0\1\50\3\0\1\51\1\52\1\53\1\54\1\0"+
    "\1\55\1\56\1\57\1\60\6\0\1\1\10\0\1\3"+
    "\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\0\1\3\1\1\1\4\1\5"+
    "\1\6\1\7\13\1\1\10\1\11\1\2\11\0\1\12"+
    "\75\0\1\13\1\14\4\0\1\15\3\0\1\16\1\17"+
    "\20\0\1\20\2\0\1\21\1\0\1\22\1\23\3\0"+
    "\1\24\12\0\1\25\22\0\1\26\4\0\1\27\12\0"+
    "\1\30\5\0\1\31\1\0\1\32\11\0\1\33\2\0"+
    "\1\34\1\35\2\0\1\36\14\0\1\37\1\40\1\0"+
    "\1\41\7\0\1\42\3\0\1\43\2\0\1\44\12\0"+
    "\1\45\12\0\1\46\4\0\1\47\1\0\1\50\1\51"+
    "\2\0\1\52\2\0\1\53\1\54\2\0\1\55";

  private static int [] zzUnpackAction() {
    int [] result = new int[277];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\61\0\142\0\61\0\61\0\223\0\61"+
    "\0\304\0\61\0\61\0\365\0\u0126\0\u0157\0\u0188\0\u01b9"+
    "\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df\0\142\0\61"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467"+
    "\0\u0498\0\u04c9\0\61\0\u04fa\0\u052b\0\u055c\0\u058d\0\u05be"+
    "\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746"+
    "\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce"+
    "\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56"+
    "\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde"+
    "\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66"+
    "\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee"+
    "\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076"+
    "\0\61\0\61\0\u10a7\0\u10d8\0\u1109\0\u113a\0\61\0\u116b"+
    "\0\u119c\0\u11cd\0\61\0\61\0\u11fe\0\u122f\0\u1260\0\u1291"+
    "\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419"+
    "\0\u144a\0\u147b\0\u14ac\0\u14dd\0\61\0\u150e\0\u153f\0\61"+
    "\0\u1570\0\61\0\61\0\u15a1\0\u15d2\0\u1603\0\u1634\0\u1665"+
    "\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed"+
    "\0\u181e\0\61\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913\0\u1944"+
    "\0\u1975\0\u19a6\0\u19d7\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc"+
    "\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90\0\61\0\u1bc1\0\u1bf2\0\u1c23"+
    "\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a\0\u1dab"+
    "\0\u1ddc\0\u1e0d\0\u1e3e\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33"+
    "\0\u1f64\0\u1f95\0\61\0\u1fc6\0\u1ff7\0\u2028\0\u2059\0\u208a"+
    "\0\u20bb\0\u20ec\0\u211d\0\u214e\0\u217f\0\u21b0\0\61\0\u21e1"+
    "\0\u2212\0\61\0\61\0\u2243\0\u2274\0\61\0\u22a5\0\u22d6"+
    "\0\u2307\0\u2338\0\u2369\0\u239a\0\u23cb\0\u23fc\0\u242d\0\u245e"+
    "\0\u248f\0\u24c0\0\61\0\61\0\u24f1\0\61\0\u2522\0\u2553"+
    "\0\u2584\0\u25b5\0\u25e6\0\u2617\0\u2648\0\61\0\u2679\0\u26aa"+
    "\0\u26db\0\61\0\u270c\0\u273d\0\61\0\u276e\0\u279f\0\u27d0"+
    "\0\u2801\0\u2832\0\u2863\0\u2894\0\u28c5\0\u28f6\0\u2927\0\61"+
    "\0\u2958\0\u2989\0\u29ba\0\u29eb\0\u2a1c\0\u2a4d\0\u2a7e\0\u2aaf"+
    "\0\u2ae0\0\u2b11\0\61\0\u2b42\0\u2b73\0\u2ba4\0\u2bd5\0\61"+
    "\0\u2c06\0\61\0\61\0\u2c37\0\u2c68\0\61\0\u2c99\0\u2cca"+
    "\0\61\0\61\0\u2cfb\0\u2d2c\0\61";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[277];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\2\2\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\2\2\1\17"+
    "\2\2\1\20\1\2\1\21\1\22\1\2\1\23\1\2"+
    "\1\24\1\25\1\26\3\2\1\27\1\30\7\2\1\31"+
    "\6\2\2\5\1\0\5\5\1\10\30\5\1\0\17\5"+
    "\61\0\2\5\1\0\4\5\1\32\1\10\3\5\6\32"+
    "\17\5\1\0\2\5\4\32\13\5\1\0\3\5\1\33"+
    "\1\5\1\10\30\5\1\0\2\5\1\34\7\5\1\35"+
    "\6\5\1\0\5\5\1\10\11\5\1\36\16\5\1\0"+
    "\21\5\1\0\5\5\1\10\17\5\1\37\10\5\1\0"+
    "\21\5\1\0\5\5\1\10\14\5\1\40\2\5\1\41"+
    "\10\5\1\0\21\5\1\0\5\5\1\10\7\5\1\42"+
    "\20\5\1\0\21\5\1\0\5\5\1\10\6\5\1\43"+
    "\21\5\1\0\21\5\1\0\5\5\1\10\17\5\1\44"+
    "\10\5\1\0\21\5\1\0\5\5\1\10\24\5\1\45"+
    "\3\5\1\0\21\5\1\0\5\5\1\10\3\5\1\46"+
    "\24\5\1\0\21\5\1\0\5\5\1\10\13\5\1\47"+
    "\14\5\1\0\21\5\1\0\5\5\1\10\7\5\1\50"+
    "\3\5\1\51\14\5\1\0\21\5\1\0\5\5\1\10"+
    "\22\5\1\52\5\5\1\0\21\5\1\0\5\5\1\10"+
    "\30\5\1\0\11\5\1\53\7\5\1\0\4\5\1\54"+
    "\1\10\3\5\6\54\17\5\1\0\2\5\4\54\13\5"+
    "\1\0\5\5\1\10\30\5\1\0\2\5\1\55\7\5"+
    "\1\56\6\5\1\0\5\5\1\10\30\5\1\0\4\5"+
    "\1\57\10\5\1\60\3\5\1\0\5\5\1\10\30\5"+
    "\1\0\2\5\1\61\16\5\1\0\5\5\1\10\21\5"+
    "\1\62\6\5\1\0\21\5\1\0\5\5\1\10\21\5"+
    "\1\63\6\5\1\0\21\5\1\0\5\5\1\10\3\5"+
    "\1\64\24\5\1\0\21\5\1\0\5\5\1\10\14\5"+
    "\1\65\13\5\1\0\21\5\1\0\5\5\1\10\5\5"+
    "\1\66\22\5\1\0\21\5\1\0\5\5\1\10\6\5"+
    "\1\67\21\5\1\0\21\5\1\0\5\5\1\10\7\5"+
    "\1\70\20\5\1\0\21\5\1\0\5\5\1\10\6\5"+
    "\1\71\2\5\1\72\7\5\1\73\6\5\1\0\21\5"+
    "\1\0\5\5\1\10\23\5\1\74\4\5\1\0\21\5"+
    "\1\0\5\5\1\10\27\5\1\75\1\0\21\5\1\0"+
    "\5\5\1\10\23\5\1\76\4\5\1\0\21\5\1\0"+
    "\5\5\1\10\24\5\1\77\3\5\1\0\21\5\1\0"+
    "\5\5\1\10\30\5\1\0\7\5\1\100\11\5\1\0"+
    "\4\5\1\101\1\10\3\5\6\101\17\5\1\0\2\5"+
    "\4\101\13\5\1\0\5\5\1\10\30\5\1\0\4\5"+
    "\1\102\10\5\1\103\3\5\1\0\5\5\1\10\30\5"+
    "\1\0\2\5\1\104\16\5\1\0\5\5\1\10\30\5"+
    "\1\0\4\5\1\105\14\5\1\0\5\5\1\10\30\5"+
    "\1\0\13\5\1\106\5\5\1\0\5\5\1\10\30\5"+
    "\1\0\13\5\1\107\5\5\1\0\5\5\1\10\7\5"+
    "\1\110\20\5\1\0\21\5\1\0\5\5\1\10\21\5"+
    "\1\111\6\5\1\0\21\5\1\0\5\5\1\10\22\5"+
    "\1\112\5\5\1\0\21\5\1\0\5\5\1\10\17\5"+
    "\1\113\10\5\1\0\21\5\1\0\5\5\1\10\12\5"+
    "\1\114\15\5\1\0\21\5\1\0\5\5\1\10\13\5"+
    "\1\115\14\5\1\0\21\5\1\0\5\5\1\10\25\5"+
    "\1\116\2\5\1\0\21\5\1\0\5\5\1\10\21\5"+
    "\1\117\6\5\1\0\21\5\1\0\5\5\1\10\13\5"+
    "\1\120\14\5\1\0\21\5\1\0\5\5\1\10\3\5"+
    "\1\121\15\5\1\122\6\5\1\0\21\5\1\0\5\5"+
    "\1\10\13\5\1\123\14\5\1\0\21\5\1\0\5\5"+
    "\1\10\23\5\1\124\4\5\1\0\21\5\1\0\5\5"+
    "\1\10\24\5\1\125\3\5\1\0\21\5\1\0\5\5"+
    "\1\10\3\5\1\126\24\5\1\0\21\5\1\0\5\5"+
    "\1\10\30\5\1\0\3\5\1\127\15\5\1\0\4\5"+
    "\1\130\1\10\3\5\6\130\17\5\1\0\2\5\4\130"+
    "\13\5\1\0\5\5\1\10\30\5\1\0\4\5\1\131"+
    "\14\5\1\0\5\5\1\10\30\5\1\0\13\5\1\132"+
    "\5\5\1\0\5\5\1\10\30\5\1\0\13\5\1\133"+
    "\5\5\1\0\5\5\1\10\30\5\1\0\6\5\1\134"+
    "\12\5\1\0\5\5\1\10\30\5\1\0\6\5\1\135"+
    "\12\5\1\0\5\5\1\10\30\5\1\0\2\5\1\136"+
    "\16\5\1\0\5\5\1\10\11\5\1\137\16\5\1\0"+
    "\21\5\1\0\5\5\1\10\3\5\1\140\24\5\1\0"+
    "\21\5\1\0\5\5\1\10\7\5\1\141\20\5\1\0"+
    "\21\5\1\0\5\5\1\10\21\5\1\142\6\5\1\0"+
    "\21\5\1\0\5\5\1\10\3\5\1\143\24\5\1\0"+
    "\21\5\1\0\5\5\1\10\10\5\1\144\17\5\1\0"+
    "\21\5\1\0\5\5\1\10\3\5\1\145\13\5\1\146"+
    "\10\5\1\0\21\5\1\0\5\5\1\10\7\5\1\147"+
    "\20\5\1\0\21\5\1\0\5\5\1\10\16\5\1\150"+
    "\11\5\1\0\21\5\1\0\5\5\1\10\15\5\1\151"+
    "\12\5\1\0\21\5\1\0\5\5\1\10\3\5\1\152"+
    "\24\5\1\0\21\5\1\0\5\5\1\10\17\5\1\153"+
    "\10\5\1\0\21\5\1\0\5\5\1\10\17\5\1\154"+
    "\10\5\1\0\21\5\1\0\5\5\1\10\14\5\1\155"+
    "\13\5\1\0\21\5\1\0\5\5\1\10\21\5\1\156"+
    "\6\5\1\0\21\5\1\0\5\5\1\10\30\5\1\0"+
    "\13\5\1\157\5\5\1\0\4\5\1\160\1\10\3\5"+
    "\6\160\17\5\1\0\2\5\4\160\13\5\1\0\5\5"+
    "\1\10\30\5\1\0\6\5\1\161\12\5\1\0\5\5"+
    "\1\10\30\5\1\0\6\5\1\162\12\5\1\0\5\5"+
    "\1\10\30\5\1\0\2\5\1\163\16\5\1\0\5\5"+
    "\1\10\30\5\1\0\11\5\1\164\7\5\1\0\5\5"+
    "\1\10\30\5\1\0\3\5\1\165\15\5\1\0\5\5"+
    "\1\10\30\5\1\0\7\5\1\166\11\5\1\0\5\5"+
    "\1\10\3\5\1\167\24\5\1\0\21\5\1\0\5\5"+
    "\1\10\21\5\1\170\6\5\1\0\21\5\1\0\5\5"+
    "\1\10\30\5\1\0\1\5\1\171\17\5\1\0\5\5"+
    "\1\10\13\5\1\172\14\5\1\0\21\5\1\0\5\5"+
    "\1\10\30\5\1\0\1\5\1\173\17\5\1\0\5\5"+
    "\1\10\30\5\1\0\1\5\1\174\17\5\1\0\5\5"+
    "\1\10\3\5\1\175\24\5\1\0\21\5\1\0\5\5"+
    "\1\10\7\5\1\176\20\5\1\0\21\5\1\0\5\5"+
    "\1\10\10\5\1\177\17\5\1\0\21\5\1\0\5\5"+
    "\1\10\17\5\1\200\10\5\1\0\21\5\1\0\5\5"+
    "\1\10\13\5\1\201\14\5\1\0\21\5\1\0\5\5"+
    "\1\10\30\5\1\0\5\5\1\202\13\5\1\0\4\5"+
    "\1\203\1\10\3\5\6\203\17\5\1\0\2\5\4\203"+
    "\13\5\1\0\5\5\1\10\30\5\1\0\11\5\1\204"+
    "\7\5\1\0\5\5\1\10\30\5\1\0\3\5\1\205"+
    "\15\5\1\0\5\5\1\10\30\5\1\0\7\5\1\206"+
    "\11\5\1\0\5\5\1\10\30\5\1\0\10\5\1\207"+
    "\10\5\1\0\5\5\1\10\30\5\1\0\16\5\1\210"+
    "\2\5\1\0\5\5\1\10\30\5\1\0\5\5\1\211"+
    "\13\5\1\0\5\5\1\10\21\5\1\212\6\5\1\0"+
    "\21\5\1\0\5\5\1\10\30\5\1\0\1\5\1\213"+
    "\17\5\1\0\5\5\1\10\5\5\1\214\7\5\1\215"+
    "\12\5\1\0\21\5\1\0\5\5\1\10\5\5\1\216"+
    "\22\5\1\0\21\5\1\0\5\5\1\10\20\5\1\217"+
    "\7\5\1\0\21\5\1\0\5\5\1\10\22\5\1\220"+
    "\5\5\1\0\21\5\1\0\5\5\1\10\23\5\1\221"+
    "\4\5\1\0\21\5\1\0\5\5\1\10\17\5\1\222"+
    "\10\5\1\0\21\5\1\0\5\5\1\10\17\5\1\223"+
    "\10\5\1\0\21\5\1\0\5\5\1\10\30\5\1\0"+
    "\10\5\1\224\10\5\1\0\5\5\1\10\30\5\1\0"+
    "\16\5\1\225\2\5\1\0\5\5\1\10\30\5\1\0"+
    "\5\5\1\226\13\5\1\0\5\5\1\10\30\5\1\0"+
    "\5\5\1\227\13\5\1\0\5\5\1\10\30\5\1\0"+
    "\15\5\1\230\3\5\1\0\5\5\1\10\30\5\1\0"+
    "\15\5\1\231\3\5\1\0\5\5\1\10\30\5\1\0"+
    "\1\5\1\232\17\5\1\0\5\5\1\10\5\5\1\233"+
    "\12\5\1\234\1\5\1\235\5\5\1\0\21\5\1\0"+
    "\5\5\1\10\21\5\1\236\6\5\1\0\21\5\1\0"+
    "\5\5\1\10\17\5\1\237\10\5\1\0\21\5\1\0"+
    "\5\5\1\10\3\5\1\240\24\5\1\0\21\5\1\0"+
    "\5\5\1\10\3\5\1\241\24\5\1\0\21\5\1\0"+
    "\5\5\1\10\13\5\1\242\14\5\1\0\21\5\1\0"+
    "\5\5\1\10\21\5\1\243\6\5\1\0\21\5\1\0"+
    "\5\5\1\10\30\5\1\0\1\5\1\244\17\5\1\0"+
    "\5\5\1\10\2\5\1\245\25\5\1\0\5\5\1\246"+
    "\13\5\1\0\5\5\1\10\30\5\1\0\15\5\1\247"+
    "\3\5\1\0\5\5\1\10\30\5\1\0\15\5\1\250"+
    "\3\5\1\0\5\5\1\10\30\5\1\0\14\5\1\251"+
    "\4\5\1\0\5\5\1\10\30\5\1\0\11\5\1\252"+
    "\7\5\1\0\5\5\1\10\30\5\1\0\13\5\1\253"+
    "\5\5\1\0\5\5\1\10\5\5\1\254\22\5\1\0"+
    "\21\5\1\0\5\5\1\10\17\5\1\255\10\5\1\0"+
    "\21\5\1\0\5\5\1\10\3\5\1\256\24\5\1\0"+
    "\21\5\1\0\5\5\1\10\13\5\1\257\14\5\1\0"+
    "\21\5\1\0\5\5\1\10\7\5\1\260\20\5\1\0"+
    "\21\5\1\0\5\5\1\10\6\5\1\261\21\5\1\0"+
    "\21\5\1\0\5\5\1\10\21\5\1\262\6\5\1\0"+
    "\21\5\1\0\5\5\1\10\11\5\1\263\16\5\1\0"+
    "\21\5\1\0\5\5\1\10\23\5\1\264\4\5\1\0"+
    "\21\5\1\0\5\5\1\10\17\5\1\265\10\5\1\0"+
    "\21\5\1\0\5\5\1\10\5\5\1\266\7\5\1\267"+
    "\12\5\1\0\21\5\1\0\5\5\1\10\30\5\1\0"+
    "\14\5\1\270\4\5\1\0\5\5\1\10\30\5\1\0"+
    "\11\5\1\271\7\5\1\0\5\5\1\10\30\5\1\0"+
    "\13\5\1\272\5\5\1\0\5\5\1\10\2\5\1\273"+
    "\25\5\1\0\21\5\1\0\5\5\1\10\30\5\1\0"+
    "\14\5\1\274\4\5\1\0\5\5\1\10\30\5\1\0"+
    "\11\5\1\275\7\5\1\0\5\5\1\10\17\5\1\276"+
    "\10\5\1\0\21\5\1\0\5\5\1\10\15\5\1\277"+
    "\12\5\1\0\21\5\1\0\5\5\1\10\11\5\1\300"+
    "\16\5\1\0\21\5\1\0\5\5\1\10\23\5\1\301"+
    "\4\5\1\0\21\5\1\0\5\5\1\10\3\5\1\302"+
    "\24\5\1\0\21\5\1\0\5\5\1\10\13\5\1\303"+
    "\14\5\1\0\21\5\1\0\5\5\1\10\30\5\1\0"+
    "\1\5\1\304\17\5\1\0\5\5\1\10\13\5\1\305"+
    "\14\5\1\0\21\5\1\0\5\5\1\10\13\5\1\306"+
    "\14\5\1\0\21\5\1\0\5\5\1\10\22\5\1\307"+
    "\5\5\1\0\21\5\1\0\5\5\1\10\21\5\1\310"+
    "\6\5\1\0\21\5\1\0\5\5\1\10\17\5\1\311"+
    "\10\5\1\0\21\5\1\0\5\5\1\10\2\5\1\312"+
    "\25\5\1\0\21\5\1\0\5\5\1\10\2\5\1\313"+
    "\25\5\1\0\14\5\1\314\4\5\1\0\5\5\1\10"+
    "\30\5\1\0\11\5\1\315\7\5\1\0\5\5\1\10"+
    "\2\5\1\316\25\5\1\0\21\5\1\0\5\5\1\10"+
    "\30\5\1\0\14\5\1\317\4\5\1\0\5\5\1\10"+
    "\15\5\1\320\12\5\1\0\21\5\1\0\5\5\1\10"+
    "\20\5\1\321\7\5\1\0\21\5\1\0\5\5\1\10"+
    "\13\5\1\322\14\5\1\0\21\5\1\0\5\5\1\10"+
    "\13\5\1\323\14\5\1\0\21\5\1\0\5\5\1\10"+
    "\5\5\1\324\22\5\1\0\21\5\1\0\5\5\1\10"+
    "\10\5\1\325\17\5\1\0\21\5\1\0\5\5\1\10"+
    "\20\5\1\326\7\5\1\0\21\5\1\0\5\5\1\10"+
    "\16\5\1\327\11\5\1\0\21\5\1\0\5\5\1\10"+
    "\17\5\1\330\10\5\1\0\21\5\1\0\5\5\1\10"+
    "\7\5\1\331\20\5\1\0\21\5\1\0\5\5\1\10"+
    "\6\5\1\332\21\5\1\0\21\5\1\0\5\5\1\10"+
    "\2\5\1\333\25\5\1\0\21\5\1\0\5\5\1\10"+
    "\2\5\1\334\25\5\1\0\14\5\1\335\4\5\1\0"+
    "\5\5\1\10\2\5\1\336\25\5\1\0\21\5\1\0"+
    "\5\5\1\10\20\5\1\337\7\5\1\0\21\5\1\0"+
    "\5\5\1\10\17\5\1\340\10\5\1\0\21\5\1\0"+
    "\5\5\1\10\16\5\1\341\11\5\1\0\21\5\1\0"+
    "\5\5\1\10\17\5\1\342\10\5\1\0\21\5\1\0"+
    "\5\5\1\10\13\5\1\343\14\5\1\0\21\5\1\0"+
    "\5\5\1\10\13\5\1\344\14\5\1\0\21\5\1\0"+
    "\5\5\1\10\3\5\1\345\24\5\1\0\21\5\1\0"+
    "\5\5\1\10\3\5\1\346\24\5\1\0\21\5\1\0"+
    "\5\5\1\10\30\5\1\0\1\5\1\347\17\5\1\0"+
    "\5\5\1\10\3\5\1\350\24\5\1\0\21\5\1\0"+
    "\5\5\1\10\13\5\1\351\14\5\1\0\21\5\1\0"+
    "\5\5\1\10\2\5\1\352\25\5\1\0\21\5\1\0"+
    "\5\5\1\10\17\5\1\353\10\5\1\0\21\5\1\0"+
    "\5\5\1\10\16\5\1\354\11\5\1\0\21\5\1\0"+
    "\5\5\1\10\3\5\1\355\24\5\1\0\21\5\1\0"+
    "\5\5\1\10\30\5\1\0\1\5\1\356\17\5\1\0"+
    "\5\5\1\10\17\5\1\357\10\5\1\0\21\5\1\0"+
    "\5\5\1\10\5\5\1\360\22\5\1\0\21\5\1\0"+
    "\5\5\1\10\11\5\1\361\16\5\1\0\21\5\1\0"+
    "\5\5\1\10\26\5\1\362\1\5\1\0\21\5\1\0"+
    "\5\5\1\10\5\5\1\363\22\5\1\0\21\5\1\0"+
    "\5\5\1\10\10\5\1\364\17\5\1\0\21\5\1\0"+
    "\5\5\1\10\16\5\1\365\11\5\1\0\21\5\1\0"+
    "\5\5\1\10\7\5\1\366\20\5\1\0\21\5\1\0"+
    "\5\5\1\10\26\5\1\367\1\5\1\0\21\5\1\0"+
    "\5\5\1\10\16\5\1\370\11\5\1\0\21\5\1\0"+
    "\5\5\1\10\3\5\1\371\24\5\1\0\21\5\1\0"+
    "\5\5\1\10\13\5\1\372\14\5\1\0\21\5\1\0"+
    "\5\5\1\10\7\5\1\373\20\5\1\0\21\5\1\0"+
    "\5\5\1\10\13\5\1\374\14\5\1\0\21\5\1\0"+
    "\5\5\1\10\13\5\1\375\14\5\1\0\21\5\1\0"+
    "\5\5\1\10\7\5\1\376\20\5\1\0\21\5\1\0"+
    "\5\5\1\10\16\5\1\377\11\5\1\0\21\5\1\0"+
    "\5\5\1\10\7\5\1\u0100\20\5\1\0\21\5\1\0"+
    "\5\5\1\10\5\5\1\u0101\22\5\1\0\21\5\1\0"+
    "\5\5\1\10\16\5\1\u0102\11\5\1\0\21\5\1\0"+
    "\5\5\1\10\4\5\1\u0103\23\5\1\0\21\5\1\0"+
    "\5\5\1\10\17\5\1\u0104\10\5\1\0\21\5\1\0"+
    "\5\5\1\10\5\5\1\u0105\22\5\1\0\21\5\1\0"+
    "\5\5\1\10\16\5\1\u0106\11\5\1\0\21\5\1\0"+
    "\5\5\1\10\23\5\1\u0107\4\5\1\0\21\5\1\0"+
    "\5\5\1\10\4\5\1\u0108\23\5\1\0\21\5\1\0"+
    "\5\5\1\10\13\5\1\u0109\14\5\1\0\21\5\1\0"+
    "\5\5\1\10\3\5\1\u010a\24\5\1\0\21\5\1\0"+
    "\5\5\1\10\16\5\1\u010b\11\5\1\0\21\5\1\0"+
    "\5\5\1\10\3\5\1\u010c\24\5\1\0\21\5\1\0"+
    "\5\5\1\10\23\5\1\u010d\4\5\1\0\21\5\1\0"+
    "\5\5\1\10\7\5\1\u010e\20\5\1\0\21\5\1\0"+
    "\5\5\1\10\17\5\1\u010f\10\5\1\0\21\5\1\0"+
    "\5\5\1\10\5\5\1\u0110\22\5\1\0\21\5\1\0"+
    "\5\5\1\10\7\5\1\u0111\20\5\1\0\21\5\1\0"+
    "\5\5\1\10\16\5\1\u0112\11\5\1\0\21\5\1\0"+
    "\5\5\1\10\13\5\1\u0113\14\5\1\0\21\5\1\0"+
    "\5\5\1\10\17\5\1\u0114\10\5\1\0\21\5\1\0"+
    "\5\5\1\10\16\5\1\u0115\11\5\1\0\17\5";

  private static int [] zzUnpacktrans() {
    int [] result = new int[11613];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\11\1\0\21\1\1\11\2\1\11\0"+
    "\1\1\75\0\2\1\4\0\1\1\3\0\2\1\20\0"+
    "\1\1\2\0\1\1\1\0\2\1\3\0\1\1\12\0"+
    "\1\1\22\0\1\1\4\0\1\1\12\0\1\1\5\0"+
    "\1\1\1\0\1\1\11\0\1\1\2\0\2\1\2\0"+
    "\1\1\14\0\2\1\1\0\1\1\7\0\1\1\3\0"+
    "\1\1\2\0\1\1\12\0\1\1\12\0\1\1\4\0"+
    "\1\1\1\0\2\1\2\0\1\1\2\0\2\1\2\0"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[277];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return new Symbol(ParserSym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { JOptionPane.showMessageDialog(null, "Ha ocurrido un error en la linea y columna " + yyline + " " + yycolumn +" en el token: " + yytext());
            }
          // fall through
          case 46: break;
          case 2:
            { 
            }
          // fall through
          case 47: break;
          case 3:
            { return new Symbol(ParserSym.COMILLAS, yycolumn, yyline, yytext());
            }
          // fall through
          case 48: break;
          case 4:
            { return new Symbol(ParserSym.IDENTIFICADOR, yycolumn, yyline, yytext());
            }
          // fall through
          case 49: break;
          case 5:
            { return new Symbol(ParserSym.MENORQUE, yycolumn, yyline, yytext());
            }
          // fall through
          case 50: break;
          case 6:
            { return new Symbol(ParserSym.IGUAL, yycolumn, yyline, yytext());
            }
          // fall through
          case 51: break;
          case 7:
            { return new Symbol(ParserSym.MAYORQUE, yycolumn, yyline, yytext());
            }
          // fall through
          case 52: break;
          case 8:
            { return new Symbol(ParserSym.CORCHETEA, yycolumn, yyline, yytext());
            }
          // fall through
          case 53: break;
          case 9:
            { return new Symbol(ParserSym.CORCHETEC, yycolumn, yyline, yytext());
            }
          // fall through
          case 54: break;
          case 10:
            { return new Symbol(ParserSym.ID, yycolumn, yyline, yytext());
            }
          // fall through
          case 55: break;
          case 11:
            { return new Symbol(ParserSym.CLASE, yycolumn, yyline, yytext());
            }
          // fall through
          case 56: break;
          case 12:
            { return new Symbol(ParserSym.COLOR, yycolumn, yyline, yytext());
            }
          // fall through
          case 57: break;
          case 13:
            { return new Symbol(ParserSym.PADRE, yycolumn, yyline, yytext());
            }
          // fall through
          case 58: break;
          case 14:
            { return new Symbol(ParserSym.SITIO, yycolumn, yyline, yytext());
            }
          // fall through
          case 59: break;
          case 15:
            { return new Symbol(ParserSym.TEXTO, yycolumn, yyline, yytext());
            }
          // fall through
          case 60: break;
          case 16:
            { return new Symbol(ParserSym.PAGINA, yycolumn, yyline, yytext());
            }
          // fall through
          case 61: break;
          case 17:
            { return new Symbol(ParserSym.TITULO, yycolumn, yyline, yytext());
            }
          // fall through
          case 62: break;
          case 18:
            { return new Symbol(ParserSym.NOMBRE, yycolumn, yyline, yytext());
            }
          // fall through
          case 63: break;
          case 19:
            { return new Symbol(ParserSym.HEXADECIMAL, yycolumn, yyline, yytext());
            }
          // fall through
          case 64: break;
          case 20:
            { return new Symbol(ParserSym.INITACCION, yycolumn, yyline, yytext());
            }
          // fall through
          case 65: break;
          case 21:
            { return new Symbol(ParserSym.PARRAFO, yycolumn, yyline, yytext());
            }
          // fall through
          case 66: break;
          case 22:
            { return new Symbol(ParserSym.ENDACCION, yycolumn, yyline, yytext());
            }
          // fall through
          case 67: break;
          case 23:
            { return new Symbol(ParserSym.INITATRIBUT, yycolumn, yyline, yytext());
            }
          // fall through
          case 68: break;
          case 24:
            { return new Symbol(ParserSym.PARAMETRO, yycolumn, yyline, yytext());
            }
          // fall through
          case 69: break;
          case 25:
            { return new Symbol(ParserSym.INITACCIONES, yycolumn, yyline, yytext());
            }
          // fall through
          case 70: break;
          case 26:
            { return new Symbol(ParserSym.INITPARAMETRO, yycolumn, yyline, yytext());
            }
          // fall through
          case 71: break;
          case 27:
            { return new Symbol(ParserSym.PARAMETROS, yycolumn, yyline, yytext());
            }
          // fall through
          case 72: break;
          case 28:
            { return new Symbol(ParserSym.ENDACCIONES, yycolumn, yyline, yytext());
            }
          // fall through
          case 73: break;
          case 29:
            { return new Symbol(ParserSym.ENDATRIBUT, yycolumn, yyline, yytext());
            }
          // fall through
          case 74: break;
          case 30:
            { return new Symbol(ParserSym.INITATRIBUTOS, yycolumn, yyline, yytext());
            }
          // fall through
          case 75: break;
          case 31:
            { return new Symbol(ParserSym.ENDATRIBUTOS, yycolumn, yyline, yytext());
            }
          // fall through
          case 76: break;
          case 32:
            { return new Symbol(ParserSym.ENDPARAMETRO, yycolumn, yyline, yytext());
            }
          // fall through
          case 77: break;
          case 33:
            { return new Symbol(ParserSym.INITPARAMETROS, yycolumn, yyline, yytext());
            }
          // fall through
          case 78: break;
          case 34:
            { return new Symbol(ParserSym.NUEVA_PAGINA, yycolumn, yyline, yytext());
            }
          // fall through
          case 79: break;
          case 35:
            { return new Symbol(ParserSym.ENDPARAMETROS, yycolumn, yyline, yytext());
            }
          // fall through
          case 80: break;
          case 36:
            { return new Symbol(ParserSym.BORRAR_PAGINA, yycolumn, yyline, yytext());
            }
          // fall through
          case 81: break;
          case 37:
            { return new Symbol(ParserSym.FECHA_CREACION, yycolumn, yyline, yytext());
            }
          // fall through
          case 82: break;
          case 38:
            { return new Symbol(ParserSym.NUEVO_SITIO_WEB, yycolumn, yyline, yytext());
            }
          // fall through
          case 83: break;
          case 39:
            { return new Symbol(ParserSym.BORRAR_SITIO_WEB, yycolumn, yyline, yytext());
            }
          // fall through
          case 84: break;
          case 40:
            { return new Symbol(ParserSym.MODIFICAR_PAGINA, yycolumn, yyline, yytext());
            }
          // fall through
          case 85: break;
          case 41:
            { return new Symbol(ParserSym.USUARIO_CREACION, yycolumn, yyline, yytext());
            }
          // fall through
          case 86: break;
          case 42:
            { return new Symbol(ParserSym.BORRAR_COMPONENTE, yycolumn, yyline, yytext());
            }
          // fall through
          case 87: break;
          case 43:
            { return new Symbol(ParserSym.AGREGAR_COMPONENTE, yycolumn, yyline, yytext());
            }
          // fall through
          case 88: break;
          case 44:
            { return new Symbol(ParserSym.FECHA_MODIFICACION, yycolumn, yyline, yytext());
            }
          // fall through
          case 89: break;
          case 45:
            { return new Symbol(ParserSym.USUARIO_MODIFICACION, yycolumn, yyline, yytext());
            }
          // fall through
          case 90: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
