
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.example.cup;

import java_cup.runtime;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\012\000\002\005\004\000\002\005\003" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\006\003\000\002\006\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\011\015\000\002\012\007" +
    "\000\002\013\016\000\002\015\007\000\002\014\012\000" +
    "\002\016\016\000\002\020\010\000\002\017\016\000\002" +
    "\021\015\000\002\022\015\000\002\023\015\000\002\024" +
    "\015\000\002\025\015\000\002\032\015\000\002\026\015" +
    "\000\002\027\003\000\002\040\015\000\002\031\005\000" +
    "\002\033\006\000\002\042\015\000\002\043\016\000\002" +
    "\035\016\000\002\034\005\000\002\055\003\000\002\055" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\003\000\002\055\003\000\002\055\003\000" +
    "\002\030\006\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\052\003\000\002\052\003\000\002\041" +
    "\015\000\002\044\015\000\002\045\015\000\002\046\015" +
    "\000\002\047\015\000\002\050\015\000\002\054\015\000" +
    "\002\051\015\000\002\053\006\000\002\056\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0137\000\004\033\006\001\002\000\004\002\u0139\001" +
    "\002\000\004\002\000\001\002\000\006\026\u012b\041\u012c" +
    "\001\002\000\022\004\032\012\017\013\020\017\011\020" +
    "\030\021\013\024\023\025\027\001\002\000\004\002\uffff" +
    "\001\002\000\004\036\u0124\001\002\000\006\002\ufff1\033" +
    "\ufff1\001\002\000\004\036\u0119\001\002\000\006\002\ufffa" +
    "\033\ufffa\001\002\000\006\002\ufff8\033\ufff8\001\002\000" +
    "\006\002\ufff7\033\ufff7\001\002\000\004\036\u0115\001\002" +
    "\000\004\036\350\001\002\000\006\002\ufff9\033\ufff9\001" +
    "\002\000\006\002\ufff3\033\ufff3\001\002\000\004\036\174" +
    "\001\002\000\006\002\ufff2\033\ufff2\001\002\000\006\002" +
    "\ufff6\033\ufff6\001\002\000\006\002\ufff5\033\ufff5\001\002" +
    "\000\004\036\154\001\002\000\004\036\150\001\002\000" +
    "\006\002\ufff4\033\ufff4\001\002\000\004\036\034\001\002" +
    "\000\006\002\ufffb\033\ufffb\001\002\000\004\034\035\001" +
    "\002\000\004\033\037\001\002\000\004\033\042\001\002" +
    "\000\004\030\040\001\002\000\004\034\041\001\002\000" +
    "\004\033\uffdf\001\002\000\004\027\136\001\002\000\004" +
    "\033\045\001\002\000\004\033\061\001\002\000\004\027" +
    "\046\001\002\000\004\031\047\001\002\000\004\032\050" +
    "\001\002\000\004\036\051\001\002\000\004\006\052\001" +
    "\002\000\004\036\053\001\002\000\004\034\054\001\002" +
    "\000\004\037\055\001\002\000\004\040\056\001\002\000" +
    "\002\001\002\000\004\033\uffe7\001\002\000\004\033\075" +
    "\001\002\000\004\027\062\001\002\000\004\031\063\001" +
    "\002\000\004\032\064\001\002\000\004\036\065\001\002" +
    "\000\004\007\066\001\002\000\004\036\067\001\002\000" +
    "\004\034\070\001\002\000\004\037\071\001\002\000\004" +
    "\040\072\001\002\000\002\001\002\000\004\033\uffe6\001" +
    "\002\000\004\033\111\001\002\000\004\027\076\001\002" +
    "\000\004\031\077\001\002\000\004\032\100\001\002\000" +
    "\004\036\101\001\002\000\004\010\102\001\002\000\004" +
    "\036\103\001\002\000\004\034\104\001\002\000\004\037" +
    "\105\001\002\000\004\040\106\001\002\000\002\001\002" +
    "\000\004\033\uffe5\001\002\000\004\033\125\001\002\000" +
    "\004\027\112\001\002\000\004\031\113\001\002\000\004" +
    "\032\114\001\002\000\004\036\115\001\002\000\004\011" +
    "\116\001\002\000\004\036\117\001\002\000\004\034\120" +
    "\001\002\000\004\037\121\001\002\000\004\040\122\001" +
    "\002\000\002\001\002\000\004\033\uffe4\001\002\000\004" +
    "\033\132\001\002\000\004\035\126\001\002\000\004\030" +
    "\127\001\002\000\004\034\130\001\002\000\004\033\uffde" +
    "\001\002\000\006\002\ufff0\033\ufff0\001\002\000\004\035" +
    "\133\001\002\000\004\042\134\001\002\000\004\034\135" +
    "\001\002\000\006\002\uffd1\033\uffd1\001\002\000\004\031" +
    "\137\001\002\000\004\032\140\001\002\000\004\036\141" +
    "\001\002\000\004\005\142\001\002\000\004\036\143\001" +
    "\002\000\004\034\144\001\002\000\004\037\145\001\002" +
    "\000\004\040\146\001\002\000\002\001\002\000\004\033" +
    "\uffe8\001\002\000\004\034\151\001\002\000\004\033\042" +
    "\001\002\000\004\033\132\001\002\000\006\002\uffed\033" +
    "\uffed\001\002\000\004\034\155\001\002\000\004\033\042" +
    "\001\002\000\004\033\157\001\002\000\004\027\162\001" +
    "\002\000\004\033\132\001\002\000\006\002\uffea\033\uffea" +
    "\001\002\000\004\031\163\001\002\000\004\032\164\001" +
    "\002\000\004\036\165\001\002\000\004\022\166\001\002" +
    "\000\004\036\167\001\002\000\004\034\170\001\002\000" +
    "\004\037\171\001\002\000\004\040\172\001\002\000\002" +
    "\001\002\000\004\033\uffdd\001\002\000\004\034\175\001" +
    "\002\000\004\033\037\001\002\000\004\033\042\001\002" +
    "\000\004\033\157\001\002\000\004\033\201\001\002\000" +
    "\004\027\335\001\002\000\004\033\125\001\002\000\004" +
    "\033\205\001\002\000\004\033\211\001\002\000\004\056" +
    "\206\001\002\000\004\034\207\001\002\000\004\033\uffda" +
    "\001\002\000\002\001\002\000\004\041\212\001\002\000" +
    "\004\031\213\001\002\000\004\032\214\001\002\000\004" +
    "\036\215\001\002\000\014\014\216\043\222\044\220\045" +
    "\221\046\217\001\002\000\006\036\uffd0\040\uffd0\001\002" +
    "\000\006\036\uffcc\040\uffcc\001\002\000\006\036\uffce\040" +
    "\uffce\001\002\000\006\036\uffcd\040\uffcd\001\002\000\006" +
    "\036\uffcf\040\uffcf\001\002\000\004\036\224\001\002\000" +
    "\004\034\225\001\002\000\004\037\226\001\002\000\004" +
    "\033\232\001\002\000\004\040\331\001\002\000\004\040" +
    "\uffd3\001\002\000\004\040\uffd6\001\002\000\004\041\241" +
    "\001\002\000\004\040\uffd2\001\002\000\004\040\uffd5\001" +
    "\002\000\004\040\uffd7\001\002\000\004\040\uffd4\001\002" +
    "\000\004\040\uffd8\001\002\000\004\040\uffd9\001\002\000" +
    "\004\031\242\001\002\000\004\032\243\001\002\000\004" +
    "\036\244\001\002\000\022\016\254\047\245\050\247\051" +
    "\246\052\250\053\252\054\253\055\251\001\002\000\004" +
    "\036\324\001\002\000\004\036\317\001\002\000\004\036" +
    "\312\001\002\000\004\036\305\001\002\000\004\036\300" +
    "\001\002\000\004\036\273\001\002\000\004\036\266\001" +
    "\002\000\004\036\255\001\002\000\004\034\256\001\002" +
    "\000\004\037\257\001\002\000\004\040\260\001\002\000" +
    "\004\033\262\001\002\000\004\040\uffc5\001\002\000\004" +
    "\035\263\001\002\000\004\041\264\001\002\000\004\034" +
    "\265\001\002\000\004\040\uffc3\001\002\000\004\034\267" +
    "\001\002\000\004\037\270\001\002\000\004\040\271\001" +
    "\002\000\004\033\262\001\002\000\004\040\uffc6\001\002" +
    "\000\004\034\274\001\002\000\004\037\275\001\002\000" +
    "\004\040\276\001\002\000\004\033\262\001\002\000\004" +
    "\040\uffc7\001\002\000\004\034\301\001\002\000\004\037" +
    "\302\001\002\000\004\040\303\001\002\000\004\033\262" +
    "\001\002\000\004\040\uffc4\001\002\000\004\034\306\001" +
    "\002\000\004\037\307\001\002\000\004\040\310\001\002" +
    "\000\004\033\262\001\002\000\004\040\uffc8\001\002\000" +
    "\004\034\313\001\002\000\004\037\314\001\002\000\004" +
    "\040\315\001\002\000\004\033\262\001\002\000\004\040" +
    "\uffca\001\002\000\004\034\320\001\002\000\004\037\321" +
    "\001\002\000\004\040\322\001\002\000\004\033\262\001" +
    "\002\000\004\040\uffc9\001\002\000\004\034\325\001\002" +
    "\000\004\037\326\001\002\000\004\040\327\001\002\000" +
    "\004\033\262\001\002\000\004\040\uffcb\001\002\000\004" +
    "\033\262\001\002\000\002\001\002\000\004\033\132\001" +
    "\002\000\006\002\uffeb\033\uffeb\001\002\000\004\031\336" +
    "\001\002\000\004\032\337\001\002\000\004\036\340\001" +
    "\002\000\004\023\341\001\002\000\004\036\342\001\002" +
    "\000\004\034\343\001\002\000\004\037\344\001\002\000" +
    "\014\014\216\043\222\044\220\045\221\046\217\001\002" +
    "\000\004\040\346\001\002\000\002\001\002\000\004\033" +
    "\uffdc\001\002\000\004\034\351\001\002\000\004\033\042" +
    "\001\002\000\004\033\353\001\002\000\004\027\u010b\001" +
    "\002\000\004\033\356\001\002\000\004\033\371\001\002" +
    "\000\004\027\357\001\002\000\004\031\360\001\002\000" +
    "\004\032\361\001\002\000\004\036\362\001\002\000\004" +
    "\015\363\001\002\000\004\036\364\001\002\000\004\034" +
    "\365\001\002\000\004\037\366\001\002\000\004\040\367" +
    "\001\002\000\002\001\002\000\004\033\uffe2\001\002\000" +
    "\004\027\u0101\001\002\000\004\033\045\001\002\000\004" +
    "\033\uffe1\001\002\000\004\033\061\001\002\000\004\033" +
    "\075\001\002\000\004\033\111\001\002\000\004\033\132" +
    "\001\002\000\006\002\uffee\033\uffee\001\002\000\004\031" +
    "\u0102\001\002\000\004\032\u0103\001\002\000\004\036\u0104" +
    "\001\002\000\004\016\u0105\001\002\000\004\036\u0106\001" +
    "\002\000\004\034\u0107\001\002\000\004\037\u0108\001\002" +
    "\000\004\040\u0109\001\002\000\002\001\002\000\004\033" +
    "\uffe0\001\002\000\004\031\u010c\001\002\000\004\032\u010d" +
    "\001\002\000\004\036\u010e\001\002\000\004\014\u010f\001" +
    "\002\000\004\036\u0110\001\002\000\004\034\u0111\001\002" +
    "\000\004\037\u0112\001\002\000\004\040\u0113\001\002\000" +
    "\002\001\002\000\004\033\uffe3\001\002\000\004\034\u0116" +
    "\001\002\000\004\033\042\001\002\000\004\033\132\001" +
    "\002\000\006\002\uffef\033\uffef\001\002\000\004\034\u011a" +
    "\001\002\000\004\033\037\001\002\000\004\033\042\001" +
    "\002\000\004\033\157\001\002\000\004\033\201\001\002" +
    "\000\004\033\125\001\002\000\004\033\205\001\002\000" +
    "\004\033\211\001\002\000\002\001\002\000\004\033\132" +
    "\001\002\000\006\002\uffe9\033\uffe9\001\002\000\004\034" +
    "\u0125\001\002\000\004\033\037\001\002\000\004\033\042" +
    "\001\002\000\004\033\353\001\002\000\004\033\125\001" +
    "\002\000\004\033\132\001\002\000\006\002\uffec\033\uffec" +
    "\001\002\000\004\034\u0130\001\002\000\004\031\u012d\001" +
    "\002\000\004\032\u012e\001\002\000\004\036\u012f\001\002" +
    "\000\022\004\uffc2\012\uffc2\013\uffc2\017\uffc2\020\uffc2\021" +
    "\uffc2\024\uffc2\025\uffc2\001\002\000\004\033\u0132\001\002" +
    "\000\004\033\ufffc\001\002\000\004\041\u012c\001\002\000" +
    "\004\033\u0135\001\002\000\004\033\ufffd\001\002\000\006" +
    "\035\u0136\041\u012c\001\002\000\004\026\u0137\001\002\000" +
    "\004\034\u0138\001\002\000\004\002\ufffe\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0137\000\012\002\003\003\007\004\004\056\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\006\032\007\013\010\020\011\014\012\015\013" +
    "\024\014\025\015\030\016\021\017\023\020\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\035\001\001\000" +
    "\004\021\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\043\001" +
    "\001\000\004\023\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\056\001\001\000\002\001" +
    "\001\000\004\024\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\072\001\001\000\002\001" +
    "\001\000\004\025\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\106\001\001\000\002\001" +
    "\001\000\004\033\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\122\001\001\000\002\001" +
    "\001\000\004\030\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\151\001\001\000\004\030\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\155\001\001\000\004" +
    "\042\157\001\001\000\002\001\001\000\004\030\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\175\001\001\000\004\021\176\001\001\000\004" +
    "\042\177\001\001\000\004\043\201\001\001\000\002\001" +
    "\001\000\004\033\202\001\001\000\004\034\203\001\001" +
    "\000\004\035\207\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\332\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\222\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\041\237\044\236\045\234\046\230\047\233\050" +
    "\235\051\232\054\227\055\226\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\053\260\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\053\271\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\053\276\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\053\303" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\053\310\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\315\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\322\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\327\001\001\000" +
    "\002\001\001\000\004\053\331\001\001\000\002\001\001" +
    "\000\004\030\333\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\344\001\001\000\002\001\001\000\004\037\346" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\351\001\001\000\004\032\353\001\001\000\002\001\001" +
    "\000\004\026\354\001\001\000\006\027\371\040\372\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\367\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\373\001\001\000\002\001\001\000\004\023\374" +
    "\001\001\000\004\024\375\001\001\000\004\025\376\001" +
    "\001\000\004\030\377\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\u0109\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\u0113\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\u0116\001" +
    "\001\000\004\030\u0117\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\u011a\001\001\000\004\021\u011b\001" +
    "\001\000\004\042\u011c\001\001\000\004\043\u011d\001\001" +
    "\000\004\033\u011e\001\001\000\004\034\u011f\001\001\000" +
    "\004\035\u0120\001\001\000\004\036\u0121\001\001\000\004" +
    "\030\u0122\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\u0125\001\001\000\004\021\u0126\001\001\000\004" +
    "\032\u0127\001\001\000\004\033\u0128\001\001\000\004\030" +
    "\u0129\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\u0130\005\u0132\056\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\u0133\056\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol cur_token) {
            System.out.println("Simbolo con error:" + symbl_name_from_id(cur_token.sym));
            System.out.println("Linea " + cur_token.left);
            System.out.println("Columna " + cur_token.right);
            if (expected_token_ids().isEmpty()) {
                System.out.println("ya no se esperaba ningun simbolo");
            }
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= onset EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // onset ::= actionSingle 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("onset",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // onset ::= actions 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("onset",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // actions ::= MENORQUE ACCIONES MAYORQUE reaction MENORQUE DIAGONAL ACCIONES MAYORQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actions",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // reaction ::= reaction actionSingle 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reaction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // reaction ::= actionSingle 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reaction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // actionSingle ::= initAcction siteWeb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actionSingle",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // actionSingle ::= initAcction page 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actionSingle",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // actionSingle ::= initAcction component 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actionSingle",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // siteWeb ::= addNewSite 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("siteWeb",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // siteWeb ::= deleteSite 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("siteWeb",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // page ::= newPage 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("page",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // page ::= modifyPage 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("page",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // page ::= deletePage 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("page",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // component ::= addComponent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("component",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // component ::= modifyComponent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("component",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // component ::= deleteComponent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("component",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // addNewSite ::= NUEVO_SITIO_WEB COMILLAS MAYORQUE initParameters id userCreator creationDate modificationDate modificationUser endParameters endAction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addNewSite",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // deleteSite ::= BORRAR_SITIO_WEB COMILLAS MAYORQUE id endAction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("deleteSite",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // newPage ::= NUEVA_PAGINA COMILLAS MAYORQUE id title site prePrincipal userCreator creationDate modificationDate modificationUser endAction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("newPage",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // deletePage ::= BORRAR_PAGINA COMILLAS MAYORQUE id endAction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("deletePage",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // modifyPage ::= MODIFICAR_PAGINA COMILLAS MAYORQUE initParameters id title endParameters endAction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifyPage",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // addComponent ::= AGREGAR_COMPONENTE COMILLAS MAYORQUE initParameters id pageComponent classComponent endParameters initAtributs atribut endAtributs endAction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addComponent",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // deleteComponent ::= BORRAR_COMPONENTE COMILLAS MAYORQUE id pageComponent endAction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("deleteComponent",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // modifyComponent ::= MODIFICAR_COMPONENTE COMILLAS MAYORQUE initParameters id pageComponent classComponent endParameters initAtributs atribut endAtributs endAction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifyComponent",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // id ::= MENORQUE PARAMETRO NOMBRE IGUAL COMILLAS ID COMILLAS MAYORQUE CORCHETEA CORCHETEC endParam 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // userCreator ::= MENORQUE PARAMETRO NOMBRE IGUAL COMILLAS USUARIO_CREACION COMILLAS MAYORQUE CORCHETEA CORCHETEC endParam 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("userCreator",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // creationDate ::= MENORQUE PARAMETRO NOMBRE IGUAL COMILLAS FECHA_CREACION COMILLAS MAYORQUE CORCHETEA CORCHETEC endParam 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creationDate",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // modificationDate ::= MENORQUE PARAMETRO NOMBRE IGUAL COMILLAS FECHA_MODIFICACION COMILLAS MAYORQUE CORCHETEA CORCHETEC endParam 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificationDate",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // modificationUser ::= MENORQUE PARAMETRO NOMBRE IGUAL COMILLAS USUARIO_MODIFICACION COMILLAS MAYORQUE CORCHETEA CORCHETEC endParam 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificationUser",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // title ::= MENORQUE PARAMETRO NOMBRE IGUAL COMILLAS TITULO COMILLAS MAYORQUE CORCHETEA CORCHETEC endParam 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("title",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // site ::= MENORQUE PARAMETRO NOMBRE IGUAL COMILLAS SITIO COMILLAS MAYORQUE CORCHETEA CORCHETEC endParam 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("site",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // prePrincipal ::= principal 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prePrincipal",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // principal ::= MENORQUE PARAMETRO NOMBRE IGUAL COMILLAS PADRE COMILLAS MAYORQUE CORCHETEA CORCHETEC endParam 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("principal",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // initParameters ::= MENORQUE PARAMETROS MAYORQUE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initParameters",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // endParameters ::= MENORQUE DIAGONAL PARAMETROS MAYORQUE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("endParameters",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // pageComponent ::= MENORQUE PARAMETRO NOMBRE IGUAL COMILLAS PAGINA COMILLAS MAYORQUE CORCHETEA CORCHETEC endParam 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pageComponent",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // classComponent ::= MENORQUE PARAMETRO NOMBRE IGUAL COMILLAS CLASE COMILLAS MAYORQUE CORCHETEA atributClass CORCHETEC endParam 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classComponent",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // atribut ::= MENORQUE ATRIBUTO NOMBRE IGUAL COMILLAS atributClass COMILLAS MAYORQUE CORCHETEA atributExtend CORCHETEC endAttribut 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribut",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // initAtributs ::= MENORQUE ATRIBUTOS MAYORQUE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initAtributs",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // atributExtend ::= textAttribut 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributExtend",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // atributExtend ::= lineupAttribut 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributExtend",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // atributExtend ::= colorAttribut 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributExtend",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // atributExtend ::= originAttribut 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributExtend",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // atributExtend ::= heightAttribut 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributExtend",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // atributExtend ::= wideAttribut 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributExtend",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // atributExtend ::= principalAttribut 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributExtend",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // atributExtend ::= labelAttribut 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributExtend",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // endAction ::= MENORQUE DIAGONAL ACTION MAYORQUE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("endAction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // atributClass ::= TITULO 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributClass",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // atributClass ::= PARRAFO 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributClass",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // atributClass ::= IMAGEN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributClass",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // atributClass ::= VIDEO 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributClass",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // atributClass ::= MENU 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributClass",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // textAttribut ::= MENORQUE ATRIBUTO NOMBRE IGUAL COMILLAS TEXTO COMILLAS MAYORQUE CORCHETEA CORCHETEC endAttribut 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("textAttribut",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // lineupAttribut ::= MENORQUE ATRIBUTO NOMBRE IGUAL COMILLAS ALINEACION COMILLAS MAYORQUE CORCHETEA CORCHETEC endAttribut 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lineupAttribut",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // colorAttribut ::= MENORQUE ATRIBUTO NOMBRE IGUAL COMILLAS COLOR COMILLAS MAYORQUE CORCHETEA CORCHETEC endAttribut 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colorAttribut",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // originAttribut ::= MENORQUE ATRIBUTO NOMBRE IGUAL COMILLAS ORIGEN COMILLAS MAYORQUE CORCHETEA CORCHETEC endAttribut 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("originAttribut",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // heightAttribut ::= MENORQUE ATRIBUTO NOMBRE IGUAL COMILLAS ALTURA COMILLAS MAYORQUE CORCHETEA CORCHETEC endAttribut 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("heightAttribut",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // wideAttribut ::= MENORQUE ATRIBUTO NOMBRE IGUAL COMILLAS ANCHO COMILLAS MAYORQUE CORCHETEA CORCHETEC endAttribut 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("wideAttribut",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // principalAttribut ::= MENORQUE ATRIBUTO NOMBRE IGUAL COMILLAS PADRE COMILLAS MAYORQUE CORCHETEA CORCHETEC endAttribut 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("principalAttribut",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // labelAttribut ::= MENORQUE ATRIBUTO NOMBRE IGUAL COMILLAS ETIQUETAS COMILLAS MAYORQUE CORCHETEA CORCHETEC endAttribut 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("labelAttribut",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // endAttribut ::= MENORQUE DIAGONAL ATRIBUTO MAYORQUE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("endAttribut",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // initAcction ::= MENORQUE ATRIBUTO NOMBRE IGUAL COMILLAS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initAcction",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
