
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.example.cup;

import java_cup.runtime;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\012\000\002\005\013\000\002\005\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\006\003\000\002\006\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\011\020\000\002\012\014" +
    "\000\002\013\023\000\002\015\014\000\002\014\017\000" +
    "\002\016\023\000\002\020\015\000\002\017\023\000\002" +
    "\021\015\000\002\022\015\000\002\023\015\000\002\024" +
    "\015\000\002\025\015\000\002\032\015\000\002\026\015" +
    "\000\002\027\003\000\002\040\015\000\002\031\005\000" +
    "\002\033\006\000\002\042\015\000\002\043\016\000\002" +
    "\035\016\000\002\034\005\000\002\055\003\000\002\055" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\003\000\002\055\003\000\002\055\003\000" +
    "\002\030\006\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\052\003\000\002\052\003\000\002\041" +
    "\015\000\002\044\015\000\002\045\015\000\002\046\015" +
    "\000\002\047\015\000\002\050\015\000\002\054\015\000" +
    "\002\051\015\000\002\053\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013c\000\004\034\006\001\002\000\006\002\ufff6\034" +
    "\ufff6\001\002\000\006\002\ufff7\034\ufff7\001\002\000\004" +
    "\026\036\001\002\000\006\002\ufff8\034\ufff8\001\002\000" +
    "\006\002\023\034\022\001\002\000\006\002\ufff5\034\ufff5" +
    "\001\002\000\006\002\ufffb\034\ufffb\001\002\000\006\002" +
    "\ufffa\034\ufffa\001\002\000\006\002\ufff3\034\ufff3\001\002" +
    "\000\006\002\ufff1\034\ufff1\001\002\000\006\002\ufff9\034" +
    "\ufff9\001\002\000\006\002\uffff\034\uffff\001\002\000\006" +
    "\002\ufff4\034\ufff4\001\002\000\006\002\ufff2\034\ufff2\001" +
    "\002\000\004\027\025\001\002\000\004\002\001\001\002" +
    "\000\006\002\000\034\000\001\002\000\004\035\026\001" +
    "\002\000\004\034\027\001\002\000\006\026\036\027\037" +
    "\001\002\000\004\034\032\001\002\000\004\034\ufffc\001" +
    "\002\000\004\036\033\001\002\000\004\027\034\001\002" +
    "\000\004\035\035\001\002\000\006\002\ufffe\034\ufffe\001" +
    "\002\000\004\032\047\001\002\000\004\035\040\001\002" +
    "\000\004\034\006\001\002\000\004\034\027\001\002\000" +
    "\004\034\043\001\002\000\004\036\044\001\002\000\004" +
    "\027\045\001\002\000\004\035\046\001\002\000\004\034" +
    "\ufffd\001\002\000\004\033\050\001\002\000\004\037\051" +
    "\001\002\000\022\004\057\012\056\013\055\017\052\020" +
    "\061\021\054\024\060\025\053\001\002\000\004\037\u0138" +
    "\001\002\000\004\037\u0133\001\002\000\004\037\u0128\001" +
    "\002\000\004\037\373\001\002\000\004\037\367\001\002" +
    "\000\004\037\303\001\002\000\004\037\105\001\002\000" +
    "\004\037\062\001\002\000\004\035\063\001\002\000\004" +
    "\034\064\001\002\000\004\030\073\001\002\000\004\034" +
    "\067\001\002\000\006\002\uffed\034\uffed\001\002\000\004" +
    "\036\070\001\002\000\004\043\071\001\002\000\004\035" +
    "\072\001\002\000\006\002\uffd1\034\uffd1\001\002\000\004" +
    "\032\074\001\002\000\004\033\075\001\002\000\004\037" +
    "\076\001\002\000\004\005\077\001\002\000\004\037\100" +
    "\001\002\000\004\035\101\001\002\000\004\040\102\001" +
    "\002\000\004\041\103\001\002\000\002\001\002\000\004" +
    "\034\uffe8\001\002\000\004\035\106\001\002\000\004\034" +
    "\110\001\002\000\004\034\064\001\002\000\004\031\111" +
    "\001\002\000\004\035\112\001\002\000\004\034\uffdf\001" +
    "\002\000\004\034\114\001\002\000\004\030\271\001\002" +
    "\000\004\034\116\001\002\000\004\030\256\001\002\000" +
    "\004\034\121\001\002\000\004\034\126\001\002\000\004" +
    "\036\122\001\002\000\004\031\123\001\002\000\004\035" +
    "\124\001\002\000\004\034\uffde\001\002\000\004\034\132" +
    "\001\002\000\004\057\127\001\002\000\004\035\130\001" +
    "\002\000\004\034\uffda\001\002\000\002\001\002\000\004" +
    "\042\133\001\002\000\004\032\134\001\002\000\004\033" +
    "\135\001\002\000\004\037\136\001\002\000\014\014\137" +
    "\044\143\045\141\046\142\047\140\001\002\000\006\037" +
    "\uffd0\041\uffd0\001\002\000\006\037\uffcc\041\uffcc\001\002" +
    "\000\006\037\uffce\041\uffce\001\002\000\006\037\uffcd\041" +
    "\uffcd\001\002\000\006\037\uffcf\041\uffcf\001\002\000\004" +
    "\037\145\001\002\000\004\035\146\001\002\000\004\040" +
    "\147\001\002\000\004\034\153\001\002\000\004\041\252" +
    "\001\002\000\004\041\uffd3\001\002\000\004\041\uffd6\001" +
    "\002\000\004\042\162\001\002\000\004\041\uffd2\001\002" +
    "\000\004\041\uffd5\001\002\000\004\041\uffd7\001\002\000" +
    "\004\041\uffd4\001\002\000\004\041\uffd8\001\002\000\004" +
    "\041\uffd9\001\002\000\004\032\163\001\002\000\004\033" +
    "\164\001\002\000\004\037\165\001\002\000\022\016\175" +
    "\050\166\051\170\052\167\053\171\054\173\055\174\056" +
    "\172\001\002\000\004\037\245\001\002\000\004\037\240" +
    "\001\002\000\004\037\233\001\002\000\004\037\226\001" +
    "\002\000\004\037\221\001\002\000\004\037\214\001\002" +
    "\000\004\037\207\001\002\000\004\037\176\001\002\000" +
    "\004\035\177\001\002\000\004\040\200\001\002\000\004" +
    "\041\201\001\002\000\004\034\203\001\002\000\004\041" +
    "\uffc5\001\002\000\004\036\204\001\002\000\004\042\205" +
    "\001\002\000\004\035\206\001\002\000\004\041\uffc3\001" +
    "\002\000\004\035\210\001\002\000\004\040\211\001\002" +
    "\000\004\041\212\001\002\000\004\034\203\001\002\000" +
    "\004\041\uffc6\001\002\000\004\035\215\001\002\000\004" +
    "\040\216\001\002\000\004\041\217\001\002\000\004\034" +
    "\203\001\002\000\004\041\uffc7\001\002\000\004\035\222" +
    "\001\002\000\004\040\223\001\002\000\004\041\224\001" +
    "\002\000\004\034\203\001\002\000\004\041\uffc4\001\002" +
    "\000\004\035\227\001\002\000\004\040\230\001\002\000" +
    "\004\041\231\001\002\000\004\034\203\001\002\000\004" +
    "\041\uffc8\001\002\000\004\035\234\001\002\000\004\040" +
    "\235\001\002\000\004\041\236\001\002\000\004\034\203" +
    "\001\002\000\004\041\uffca\001\002\000\004\035\241\001" +
    "\002\000\004\040\242\001\002\000\004\041\243\001\002" +
    "\000\004\034\203\001\002\000\004\041\uffc9\001\002\000" +
    "\004\035\246\001\002\000\004\040\247\001\002\000\004" +
    "\041\250\001\002\000\004\034\203\001\002\000\004\041" +
    "\uffcb\001\002\000\004\034\203\001\002\000\002\001\002" +
    "\000\004\034\067\001\002\000\006\002\uffeb\034\uffeb\001" +
    "\002\000\004\032\257\001\002\000\004\033\260\001\002" +
    "\000\004\037\261\001\002\000\004\023\262\001\002\000" +
    "\004\037\263\001\002\000\004\035\264\001\002\000\004" +
    "\040\265\001\002\000\014\014\137\044\143\045\141\046" +
    "\142\047\140\001\002\000\004\041\267\001\002\000\002" +
    "\001\002\000\004\034\uffdc\001\002\000\004\032\272\001" +
    "\002\000\004\033\273\001\002\000\004\037\274\001\002" +
    "\000\004\022\275\001\002\000\004\037\276\001\002\000" +
    "\004\035\277\001\002\000\004\040\300\001\002\000\004" +
    "\041\301\001\002\000\002\001\002\000\004\034\uffdd\001" +
    "\002\000\004\035\304\001\002\000\004\034\064\001\002" +
    "\000\004\034\307\001\002\000\004\034\323\001\002\000" +
    "\004\030\310\001\002\000\004\032\311\001\002\000\004" +
    "\033\312\001\002\000\004\037\313\001\002\000\004\006" +
    "\314\001\002\000\004\037\315\001\002\000\004\035\316" +
    "\001\002\000\004\040\317\001\002\000\004\041\320\001" +
    "\002\000\002\001\002\000\004\034\uffe7\001\002\000\004" +
    "\034\337\001\002\000\004\030\324\001\002\000\004\032" +
    "\325\001\002\000\004\033\326\001\002\000\004\037\327" +
    "\001\002\000\004\007\330\001\002\000\004\037\331\001" +
    "\002\000\004\035\332\001\002\000\004\040\333\001\002" +
    "\000\004\041\334\001\002\000\002\001\002\000\004\034" +
    "\uffe6\001\002\000\004\034\353\001\002\000\004\030\340" +
    "\001\002\000\004\032\341\001\002\000\004\033\342\001" +
    "\002\000\004\037\343\001\002\000\004\010\344\001\002" +
    "\000\004\037\345\001\002\000\004\035\346\001\002\000" +
    "\004\040\347\001\002\000\004\041\350\001\002\000\002" +
    "\001\002\000\004\034\uffe5\001\002\000\004\034\067\001" +
    "\002\000\004\030\354\001\002\000\004\032\355\001\002" +
    "\000\004\033\356\001\002\000\004\037\357\001\002\000" +
    "\004\011\360\001\002\000\004\037\361\001\002\000\004" +
    "\035\362\001\002\000\004\040\363\001\002\000\004\041" +
    "\364\001\002\000\002\001\002\000\004\034\uffe4\001\002" +
    "\000\006\002\ufff0\034\ufff0\001\002\000\004\035\370\001" +
    "\002\000\004\034\064\001\002\000\004\034\067\001\002" +
    "\000\006\002\uffef\034\uffef\001\002\000\004\035\374\001" +
    "\002\000\004\034\064\001\002\000\004\034\376\001\002" +
    "\000\004\030\u011e\001\002\000\004\034\u0101\001\002\000" +
    "\004\034\u010c\001\002\000\004\030\u0102\001\002\000\004" +
    "\032\u0103\001\002\000\004\033\u0104\001\002\000\004\037" +
    "\u0105\001\002\000\004\015\u0106\001\002\000\004\037\u0107" +
    "\001\002\000\004\035\u0108\001\002\000\004\040\u0109\001" +
    "\002\000\004\041\u010a\001\002\000\002\001\002\000\004" +
    "\034\uffe2\001\002\000\004\030\u0114\001\002\000\004\034" +
    "\307\001\002\000\004\034\uffe1\001\002\000\004\034\323" +
    "\001\002\000\004\034\337\001\002\000\004\034\353\001" +
    "\002\000\004\034\067\001\002\000\006\002\uffee\034\uffee" +
    "\001\002\000\004\032\u0115\001\002\000\004\033\u0116\001" +
    "\002\000\004\037\u0117\001\002\000\004\016\u0118\001\002" +
    "\000\004\037\u0119\001\002\000\004\035\u011a\001\002\000" +
    "\004\040\u011b\001\002\000\004\041\u011c\001\002\000\002" +
    "\001\002\000\004\034\uffe0\001\002\000\004\032\u011f\001" +
    "\002\000\004\033\u0120\001\002\000\004\037\u0121\001\002" +
    "\000\004\014\u0122\001\002\000\004\037\u0123\001\002\000" +
    "\004\035\u0124\001\002\000\004\040\u0125\001\002\000\004" +
    "\041\u0126\001\002\000\002\001\002\000\004\034\uffe3\001" +
    "\002\000\004\035\u0129\001\002\000\004\034\110\001\002" +
    "\000\004\034\064\001\002\000\004\034\114\001\002\000" +
    "\004\034\116\001\002\000\004\034\121\001\002\000\004" +
    "\034\126\001\002\000\004\034\132\001\002\000\002\001" +
    "\002\000\004\034\067\001\002\000\006\002\uffe9\034\uffe9" +
    "\001\002\000\004\035\u0134\001\002\000\004\034\064\001" +
    "\002\000\004\034\114\001\002\000\004\034\067\001\002" +
    "\000\006\002\uffea\034\uffea\001\002\000\004\035\u0139\001" +
    "\002\000\004\034\110\001\002\000\004\034\064\001\002" +
    "\000\004\034\376\001\002\000\004\034\121\001\002\000" +
    "\004\034\067\001\002\000\006\002\uffec\034\uffec\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013c\000\034\002\007\004\016\006\011\007\012\010" +
    "\015\011\006\012\004\013\003\014\010\015\017\016\013" +
    "\017\020\020\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\004\030\005\027\006\011\007\012\010" +
    "\015\011\006\012\004\013\003\014\010\015\017\016\013" +
    "\017\020\020\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\004\040\006\011\007\012\010\015" +
    "\011\006\012\004\013\003\014\010\015\017\016\013\017" +
    "\020\020\014\001\001\000\034\004\030\005\041\006\011" +
    "\007\012\010\015\011\006\012\004\013\003\014\010\015" +
    "\017\016\013\017\020\020\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\064\001\001\000\002\001\001\000\004\030\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\106\001\001\000\004\021\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\114\001\001\000\002\001\001\000\004" +
    "\043\116\001\001\000\002\001\001\000\004\033\117\001" +
    "\001\000\004\034\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\253\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\041" +
    "\160\044\157\045\155\046\151\047\154\050\156\051\153" +
    "\054\150\055\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\217\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\224\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\231\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\053\236\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\053\243\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\250\001\001\000\002\001\001" +
    "\000\004\053\252\001\001\000\002\001\001\000\004\030" +
    "\254\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\052\265" +
    "\001\001\000\002\001\001\000\004\037\267\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\301" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\304\001\001\000\004\022\305\001\001\000\004\023\321" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\320\001\001\000\002\001\001\000\004\024\335" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\334\001\001\000\002\001\001\000\004\025\351" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\350\001\001\000\002\001\001\000\004\030\365" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\364\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\370\001\001\000\004\030" +
    "\371\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\374\001\001\000\004\032\376\001\001\000\002\001" +
    "\001\000\004\026\377\001\001\000\006\027\u010c\040\u010d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\u010a\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\u010e\001\001\000\002\001\001\000\004\023" +
    "\u010f\001\001\000\004\024\u0110\001\001\000\004\025\u0111" +
    "\001\001\000\004\030\u0112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\u011c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\u0126\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\u0129" +
    "\001\001\000\004\021\u012a\001\001\000\004\042\u012b\001" +
    "\001\000\004\043\u012c\001\001\000\004\033\u012d\001\001" +
    "\000\004\034\u012e\001\001\000\004\035\u012f\001\001\000" +
    "\004\036\u0130\001\001\000\004\030\u0131\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\u0134\001\001\000" +
    "\004\042\u0135\001\001\000\004\030\u0136\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\u0139\001\001\000" +
    "\004\021\u013a\001\001\000\004\032\u013b\001\001\000\004" +
    "\033\u013c\001\001\000\004\030\u013d\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol cur_token) {
            System.out.println("Simbolo con error:" + symbl_name_from_id(cur_token.sym));
            System.out.println("Linea " + cur_token.left);
            System.out.println("Columna " + cur_token.right);
            if (expected_token_ids().isEmpty()) {
                System.out.println("ya no se esperaba ningun simbolo");
            }
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= onset EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // onset ::= onset actions 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("onset",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // onset ::= actionSingle 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("onset",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // actions ::= MENORQUE ACCIONES MAYORQUE reaction MENORQUE DIAGONAL ACCIONES MAYORQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actions",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // reaction ::= MENORQUE ACCIONES MAYORQUE actionSingle reaction MENORQUE DIAGONAL ACCIONES MAYORQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reaction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // reaction ::= actionSingle 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reaction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // actionSingle ::= siteWeb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actionSingle",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // actionSingle ::= page 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actionSingle",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // actionSingle ::= component 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actionSingle",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // siteWeb ::= addNewSite 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("siteWeb",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // siteWeb ::= deleteSite 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("siteWeb",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // page ::= newPage 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("page",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // page ::= modifyPage 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("page",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // page ::= deletePage 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("page",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // component ::= addComponent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("component",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // component ::= modifyComponent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("component",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // component ::= deleteComponent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("component",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // addNewSite ::= MENORQUE ACCION NOMBRE IGUAL COMILLAS NUEVO_SITIO_WEB COMILLAS MAYORQUE id userCreator creationDate modificationDate modificationUser endAction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addNewSite",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // deleteSite ::= MENORQUE ACCION NOMBRE IGUAL COMILLAS BORRAR_SITIO_WEB COMILLAS MAYORQUE id endAction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("deleteSite",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // newPage ::= MENORQUE ACCION NOMBRE IGUAL COMILLAS NUEVA_PAGINA COMILLAS MAYORQUE id title site prePrincipal userCreator creationDate modificationDate modificationUser endAction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("newPage",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // deletePage ::= MENORQUE ACCION NOMBRE IGUAL COMILLAS BORRAR_PAGINA COMILLAS MAYORQUE id endAction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("deletePage",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // modifyPage ::= MENORQUE ACCION NOMBRE IGUAL COMILLAS MODIFICAR_PAGINA COMILLAS MAYORQUE initParameters id title endParameters endAction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifyPage",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // addComponent ::= MENORQUE ACCION NOMBRE IGUAL COMILLAS AGREGAR_COMPONENTE COMILLAS MAYORQUE initParameters id pageComponent classComponent endParameters initAtributs atribut endAtributs endAction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addComponent",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // deleteComponent ::= MENORQUE ACCION NOMBRE IGUAL COMILLAS BORRAR_COMPONENTE COMILLAS MAYORQUE id pageComponent endAction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("deleteComponent",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // modifyComponent ::= MENORQUE ACCION NOMBRE IGUAL COMILLAS MODIFICAR_COMPONENTE COMILLAS MAYORQUE initParameters id pageComponent classComponent endParameters initAtributs atribut endAtributs endAction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifyComponent",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // id ::= MENORQUE PARAMETRO NOMBRE IGUAL COMILLAS ID COMILLAS MAYORQUE CORCHETEA CORCHETEC endParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // userCreator ::= MENORQUE PARAMETRO NOMBRE IGUAL COMILLAS USUARIO_CREACION COMILLAS MAYORQUE CORCHETEA CORCHETEC endParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("userCreator",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // creationDate ::= MENORQUE PARAMETRO NOMBRE IGUAL COMILLAS FECHA_CREACION COMILLAS MAYORQUE CORCHETEA CORCHETEC endParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("creationDate",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // modificationDate ::= MENORQUE PARAMETRO NOMBRE IGUAL COMILLAS FECHA_MODIFICACION COMILLAS MAYORQUE CORCHETEA CORCHETEC endParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificationDate",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // modificationUser ::= MENORQUE PARAMETRO NOMBRE IGUAL COMILLAS USUARIO_MODIFICACION COMILLAS MAYORQUE CORCHETEA CORCHETEC endParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificationUser",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // title ::= MENORQUE PARAMETRO NOMBRE IGUAL COMILLAS TITULO COMILLAS MAYORQUE CORCHETEA CORCHETEC endParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("title",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // site ::= MENORQUE PARAMETRO NOMBRE IGUAL COMILLAS SITIO COMILLAS MAYORQUE CORCHETEA CORCHETEC endParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("site",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // prePrincipal ::= principal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prePrincipal",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // principal ::= MENORQUE PARAMETRO NOMBRE IGUAL COMILLAS PADRE COMILLAS MAYORQUE CORCHETEA CORCHETEC endParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("principal",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // initParameters ::= MENORQUE PARAMETROS MAYORQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initParameters",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // endParameters ::= MENORQUE DIAGONAL PARAMETROS MAYORQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("endParameters",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // pageComponent ::= MENORQUE PARAMETRO NOMBRE IGUAL COMILLAS PAGINA COMILLAS MAYORQUE CORCHETEA CORCHETEC endParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pageComponent",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // classComponent ::= MENORQUE PARAMETRO NOMBRE IGUAL COMILLAS CLASE COMILLAS MAYORQUE CORCHETEA atributClass CORCHETEC endParam 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classComponent",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // atribut ::= MENORQUE ATRIBUTO NOMBRE IGUAL COMILLAS atributClass COMILLAS MAYORQUE CORCHETEA atributExtend CORCHETEC endAttribut 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribut",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // initAtributs ::= MENORQUE ATRIBUTOS MAYORQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initAtributs",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // atributExtend ::= textAttribut 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributExtend",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // atributExtend ::= lineupAttribut 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributExtend",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // atributExtend ::= colorAttribut 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributExtend",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // atributExtend ::= originAttribut 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributExtend",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // atributExtend ::= heightAttribut 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributExtend",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // atributExtend ::= wideAttribut 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributExtend",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // atributExtend ::= principalAttribut 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributExtend",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // atributExtend ::= labelAttribut 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributExtend",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // endAction ::= MENORQUE DIAGONAL ACTION MAYORQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("endAction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // atributClass ::= TITULO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributClass",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // atributClass ::= PARRAFO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributClass",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // atributClass ::= IMAGEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributClass",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // atributClass ::= VIDEO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributClass",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // atributClass ::= MENU 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributClass",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // textAttribut ::= MENORQUE ATRIBUTO NOMBRE IGUAL COMILLAS TEXTO COMILLAS MAYORQUE CORCHETEA CORCHETEC endAttribut 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("textAttribut",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // lineupAttribut ::= MENORQUE ATRIBUTO NOMBRE IGUAL COMILLAS ALINEACION COMILLAS MAYORQUE CORCHETEA CORCHETEC endAttribut 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lineupAttribut",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // colorAttribut ::= MENORQUE ATRIBUTO NOMBRE IGUAL COMILLAS COLOR COMILLAS MAYORQUE CORCHETEA CORCHETEC endAttribut 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colorAttribut",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // originAttribut ::= MENORQUE ATRIBUTO NOMBRE IGUAL COMILLAS ORIGEN COMILLAS MAYORQUE CORCHETEA CORCHETEC endAttribut 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("originAttribut",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // heightAttribut ::= MENORQUE ATRIBUTO NOMBRE IGUAL COMILLAS ALTURA COMILLAS MAYORQUE CORCHETEA CORCHETEC endAttribut 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("heightAttribut",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // wideAttribut ::= MENORQUE ATRIBUTO NOMBRE IGUAL COMILLAS ANCHO COMILLAS MAYORQUE CORCHETEA CORCHETEC endAttribut 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("wideAttribut",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // principalAttribut ::= MENORQUE ATRIBUTO NOMBRE IGUAL COMILLAS PADRE COMILLAS MAYORQUE CORCHETEA CORCHETEC endAttribut 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("principalAttribut",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // labelAttribut ::= MENORQUE ATRIBUTO NOMBRE IGUAL COMILLAS ETIQUETAS COMILLAS MAYORQUE CORCHETEA CORCHETEC endAttribut 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("labelAttribut",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // endAttribut ::= MENORQUE DIAGONAL ATRIBUTO MAYORQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("endAttribut",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
